from core import node_name
from core.exceptions import StateException
from core.node import Node
from core.topic import Topic


def mitm(node1: Node, node2: Node, topic: Topic):
    """
    Publish subscribe agnostic
    :param node1:
    :param node2:
    :param topic:
    :return:
    """
    (_, _, bus_info1) = node1.server.getBusStats(node_name)
    (_, _, bus_info2) = node2.server.getBusStats(node_name)
    publisher_info = None
    publisher_number = 0
    subscriber_info = None

    # NEed to create a node to sit in the middle
    # Checking if there's a publisher. If both are publishers then raise exception
    if any(topic.name in s for s in bus_info1[0]):
        publisher_info = (node1, bus_info1)
        publisher_number = 1
    if any(topic.name in s for s in bus_info2[0]):
        if publisher_info:
            raise StateException("Both nodes are publishers on the requested topic")
        publisher_info = (node2, bus_info2)
        publisher_number = 2
    if any(topic.name in s for s in bus_info1[1]):
        if publisher_number == 1:
            raise StateException("Node is both publisher and subscriber. This is wrong somehow")
        subscriber_info = (node1, bus_info1)
    if any(topic.name in s for s in bus_info2[1]):
        if subscriber_info:
            raise StateException("Both nodes are subscribers on the requested topic")
        subscriber_info = (node2, bus_info2)
    if not publisher_info or not subscriber_info:
        raise StateException("Cannot MITM this configuration", )

    # Get the topic info
    (_, _, publiser_topicinfo) = publisher_info[0].server.getBusInfo(node_name)
    for topicinfo in publiser_topicinfo:
        if topicinfo[4] == topic.name:
            pub_topic_wrapper = Topic(topic_name=topicinfo[4], message=topic.message,
                                      protocol=topicinfo[3])
        if topicinfo[2] is not 'o':
            raise StateException("Publisher isn't publishing this topic somehow, something has gone wrong")
    (_, _, subscriber_topicinfo) = subscriber_info[0].server.getBusInfo(node_name)

    subscriber_info[0].server.publisherUpdate(node_name, topic.name)
    publisher_info[0].server.requestTopic(node_name, topic.name, topic.protocol)

    print("TODO")
